
with open(os.path.join(root, "README.md"), "w") as f:
    f.write(readme)

with open(os.path.join(root, ".env.example"), "w") as f:
    f.write(env_example)

compose_yml = """services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
      POSTGRES_DB: ${POSTGRES_DB:-app}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4:8
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@local
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - db

  backend:
    build: ./backend
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      - db

  frontend:
    build: ./frontend
    ports:
      - "5173:5173"
    environment:
      VITE_API_BASE: http://localhost:8000
    depends_on:
      - backend

volumes:
  db_data:
"""

with open(os.path.join(root, "docker-compose.yml"), "w") as f:
    f.write(compose_yml)

# -----------------
# Backend (FastAPI)
# -----------------
backend_dir = os.path.join(root, "backend")
os.makedirs(backend_dir, exist_ok=True)

dockerfile_backend = """FROM python:3.11-slim

WORKDIR /app
COPY backend/requirements.txt /app/requirements.txt
RUN pip install --no-cache-dir -r /app/requirements.txt

COPY backend /app
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
"""

requirements = """fastapi==0.112.0
uvicorn[standard]==0.30.5
python-multipart==0.0.9
pydantic==2.8.2
pydantic-settings==2.4.0
SQLAlchemy==2.0.32
alembic==1.13.2
psycopg[binary]==3.2.1
passlib[bcrypt]==1.7.4
python-jose==3.3.0
"""

main_py = """from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from app.core.config import settings
from app.api import auth, projects

app = FastAPI(title="AI Fullâ€‘Stack Starter")

app.add_middleware(
    CORSMiddleware,
    allow_origins=[settings.BACKEND_CORS_ORIGINS],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/health")
def health():
    return {"status": "ok"}

app.include_router(auth.router, prefix="/auth", tags=["auth"])
app.include_router(projects.router, prefix="/projects", tags=["projects"])
"""

config_py = """from pydantic_settings import BaseSettings
from pydantic import AnyUrl
import os

class Settings(BaseSettings):
    DATABASE_URL: str = "postgresql+psycopg://app:app@db:5432/app"
    JWT_SECRET: str = "changeme"
    JWT_ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60
    BACKEND_CORS_ORIGINS: str = "http://localhost:5173"

    class Config:
        env_file = ".env"

settings = Settings()
"""

db_py = """from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, DeclarativeBase

from app.core.config import settings

engine = create_engine(settings.DATABASE_URL, pool_pre_ping=True)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

class Base(DeclarativeBase):
    pass

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
"""

models_py = """from sqlalchemy import String, Integer, ForeignKey, DateTime, func, Text
from sqlalchemy.orm import Mapped, mapped_column, relationship
from app.core.database import Base

class User(Base):
    __tablename__ = "users"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    email: Mapped[str] = mapped_column(String(255), unique=True, index=True, nullable=False)
    hashed_password: Mapped[str] = mapped_column(String(255), nullable=False)
    created_at: Mapped = mapped_column(DateTime(timezone=True), server_default=func.now())

    projects: Mapped[list["Project"]] = relationship("Project", back_populates="owner")

class Project(Base):
    __tablename__ = "projects"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    name: Mapped[str] = mapped_column(String(255), nullable=False)
    description: Mapped[str | None] = mapped_column(Text, nullable=True)
    owner_id: Mapped[int] = mapped_column(ForeignKey("users.id"), nullable=False)
    created_at: Mapped = mapped_column(DateTime(timezone=True), server_default=func.now())

    owner: Mapped["User"] = relationship("User", back_populates="projects")
"""

schemas_py = """from pydantic import BaseModel, EmailStr
from typing import Optional

class Token(BaseModel):
    access_token: str
    token_type: str = "bearer"

class UserCreate(BaseModel):
    email: EmailStr
    password: str

class UserOut(BaseModel):
    id: int
    email: EmailStr
    class Config:
        from_attributes = True

class ProjectIn(BaseModel):
    name: str
    description: Optional[str] = None

class ProjectOut(BaseModel):
    id: int
    name: str
    description: Optional[str] = None
    owner_id: int
    class Config:
        from_attributes = True
"""

security_py = """from datetime import datetime, timedelta
from typing import Optional
from jose import jwt, JWTError
from passlib.context import CryptContext
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session

from app.core.config import settings
from app.core.database import get_db
from app.models import User

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")

def hash_password(password: str) -> str:
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

def create_access_token(subject: str, expires_delta: Optional[timedelta] = None) -> str:
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode = {"sub": subject, "exp": expire}
    return jwt.encode(to_encode, settings.JWT_SECRET, algorithm=settings.JWT_ALGORITHM)

def get_current_user(db: Session = Depends(get_db), token: str = Depends(oauth2_scheme)) -> User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])
        email: str = payload.get("sub")
        if email is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    user = db.query(User).filter(User.email == email).first()
    if not user:
        raise credentials_exception
    return user
"""

auth_router = """from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from app.core.database import get_db, Base, engine
from app.models import User
from app.schemas import UserCreate, UserOut, Token
from app.core.security import hash_password, verify_password, create_access_token

router = APIRouter()

# Ensure tables exist (for demo convenience)
Base.metadata.create_all(bind=engine)

@router.post("/register", response_model=UserOut)
def register(payload: UserCreate, db: Session = Depends(get_db)):
    existing = db.query(User).filter(User.email == payload.email).first()
    if existing:
        raise HTTPException(status_code=400, detail="Email already registered")
    user = User(email=payload.email, hashed_password=hash_password(payload.password))
    db.add(user)
    db.commit()
    db.refresh(user)
    return user

@router.post("/login", response_model=Token)
def login(payload: UserCreate, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.email == payload.email).first()
    if not user or not verify_password(payload.password, user.hashed_password):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid credentials")
    token = create_access_token(user.email)
    return Token(access_token=token)
"""

projects_router = """from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.models import Project
from app.schemas import ProjectIn, ProjectOut
from app.core.security import get_current_user

router = APIRouter()

@router.get("/", response_model=List[ProjectOut])
def list_projects(db: Session = Depends(get_db), user=Depends(get_current_user)):
    return db.query(Project).filter(Project.owner_id == user.id).order_by(Project.id.desc()).all()

@router.post("/", response_model=ProjectOut)
def create_project(payload: ProjectIn, db: Session = Depends(get_db), user=Depends(get_current_user)):
    project = Project(name=payload.name, description=payload.description, owner_id=user.id)
    db.add(project)
    db.commit()
    db.refresh(project)
    return project

@router.get("/{project_id}", response_model=ProjectOut)
def get_project(project_id: int, db: Session = Depends(get_db), user=Depends(get_current_user)):
    project = db.query(Project).filter(Project.id == project_id, Project.owner_id == user.id).first()
    if not project:
        raise HTTPException(status_code=404, detail="Not found")
    return project

@router.put("/{project_id}", response_model=ProjectOut)
def update_project(project_id: int, payload: ProjectIn, db: Session = Depends(get_db), user=Depends(get_current_user)):
    project = db.query(Project).filter(Project.id == project_id, Project.owner_id == user.id).first()
    if not project:
        raise HTTPException(status_code=404, detail="Not found")
    project.name = payload.name
    project.description = payload.description
    db.commit()
    db.refresh(project)
    return project

@router.delete("/{project_id}")
def delete_project(project_id: int, db: Session = Depends(get_db), user=Depends(get_current_user)):
    project = db.query(Project).filter(Project.id == project_id, Project.owner_id == user.id).first()
    if not project:
        raise HTTPException(status_code=404, detail="Not found")
    db.delete(project)
    db.commit()
    return {"ok": True}
"""

# Write backend files
os.makedirs(os.path.join(backend_dir, "app", "api"), exist_ok=True)
os.makedirs(os.path.join(backend_dir, "app", "core"), exist_ok=True)

with open(os.path.join(root, "backend", "Dockerfile"), "w") as f:
    f.write(dockerfile_backend)

with open(os.path.join(backend_dir, "requirements.txt"), "w") as f:
    f.write(requirements)

with open(os.path.join(backend_dir, "app", "main.py"), "w") as f:
    f.write(main_py)

with open(os.path.join(backend_dir, "app", "core", "config.py"), "w") as f:
    f.write(config_py)

with open(os.path.join(backend_dir, "app", "core", "database.py"), "w") as f:
    f.write(db_py)

with open(os.path.join(backend_dir, "app", "models.py"), "w") as f:
    f.write(models_py)

with open(os.path.join(backend_dir, "app", "schemas.py"), "w") as f:
    f.write(schemas_py)

with open(os.path.join(backend_dir, "app", "core", "security.py"), "w") as f:
    f.write(security_py)

with open(os.path.join(backend_dir, "app", "api", "auth.py"), "w") as f:
    f.write(auth_router)

with open(os.path.join(backend_dir, "app", "api", "projects.py"), "w") as f:
    f.write(projects_router)

# -----------------
# Frontend (Vite + React + TS)
# -----------------
frontend_dir = os.path.join(root, "frontend")
os.makedirs(frontend_dir, exist_ok=True)

dockerfile_frontend = """FROM node:20-alpine
WORKDIR /app
COPY frontend/package.json frontend/package-lock.json* ./
RUN npm ci || npm install
COPY frontend ./
EXPOSE 5173
CMD ["npm", "run", "dev", "--", "--host"]
"""

package_json = {
  "name": "ai-fullstack-frontend",
  "private": True,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "typescript": "^5.5.4",
    "vite": "^5.4.2"
  }
}

tsconfig = {
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": True,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": True,
    "moduleResolution": "bundler",
    "resolveJsonModule": True,
    "isolatedModules": True,
    "noEmit": True,
    "jsx": "react-jsx",
    "strict": True
  },
  "include": ["src"]
}

index_html = """<!doctype html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI Fullâ€‘Stack Starter</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
"""

main_tsx = """import React from 'react'
import { createRoot } from 'react-dom/client'
import { App } from './ui/App'

createRoot(document.getElementById('root')!).render(<App />)
"""

api_ts = """const BASE = import.meta.env.VITE_API_BASE || 'http://localhost:8000';

export async function api(path: string, opts: RequestInit = {}) {
  const token = localStorage.getItem('token');
  const headers = new Headers(opts.headers);
  headers.set('Content-Type', 'application/json');
  if (token) headers.set('Authorization', `Bearer ${token}`);

  const res = await fetch(BASE + path, { ...opts, headers });
  if (!res.ok) throw new Error(await res.text());
  if (res.status === 204) return null;
  return res.headers.get('content-type')?.includes('application/json')
    ? res.json()
    : res.text();
}

export const Auth = {
  async register(email: string, password: string) {
    return api('/auth/register', { method: 'POST', body: JSON.stringify({ email, password }) });
  },
  async login(email: string, password: string) {
    const data = await api('/auth/login', { method: 'POST', body: JSON.stringify({ email, password }) });
    localStorage.setItem('token', (data as any).access_token);
    return data;
  },
};

export const Projects = {
  list: () => api('/projects/'),
  create: (name: string, description?: string) => api('/projects/', { method: 'POST', body: JSON.stringify({ name, description }) }),
  remove: (id: number) => api(`/projects/${id}`, { method: 'DELETE' }),
};
"""

app_tsx = """import React, { useEffect, useState } from 'react'
import { Auth, Projects } from '../lib/api'

export function App() {
  const [email, setEmail] = useState('demo@example.com')
  const [password, setPassword] = useState('demo12345')
  const [authed, setAuthed] = useState(!!localStorage.getItem('token'))
  const [items, setItems] = useState<any[]>([])
  const [name, setName] = useState('My Project')
  const [desc, setDesc] = useState('')

  useEffect(() => {
    if (authed) Projects.list().then(setItems).catch(console.error)
  }, [authed])

  const onRegister = async () => {
    await Auth.register(email, password)
    await onLogin()
  }

  const onLogin = async () => {
    await Auth.login(email, password)
    setAuthed(true)
    const list = await Projects.list()
    setItems(list as any[])
  }

  const onCreate = async () => {
    await Projects.create(name, desc)
    const list = await Projects.list()
    setItems(list as any[])
    setName('')
    setDesc('')
  }

  const onDelete = async (id: number) => {
    await Projects.remove(id)
    setItems((prev) => prev.filter(x => x.id !== id))
  }

  if (!authed) {
    return (
      <div style={{ maxWidth: 480, margin: '80px auto', fontFamily: 'system-ui' }}>
        <h1>AI Fullâ€‘Stack Starter</h1>
        <p>Register or login to continue.</p>
        <div>
          <input placeholder="email" value={email} onChange={e => setEmail(e.target.value)} style={{ width: '100%', padding: 8, marginBottom: 8 }} />
          <input placeholder="password" type="password" value={password} onChange={e => setPassword(e.target.value)} style={{ width: '100%', padding: 8, marginBottom: 8 }} />
          <div style={{ display: 'flex', gap: 8 }}>
            <button onClick={onRegister}>Register</button>
            <button onClick={onLogin}>Login</button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div style={{ maxWidth: 720, margin: '40px auto', fontFamily: 'system-ui' }}>
      <h1>Your Projects</h1>
      <div style={{ display: 'flex', gap: 8, marginBottom: 16 }}>
        <input placeholder="Name" value={name} onChange={e => setName(e.target.value)} />
        <input placeholder="Description" value={desc} onChange={e => setDesc(e.target.value)} />
        <button onClick={onCreate}>Add</button>
      </div>
      <ul>
        {items.map((x) => (
          <li key={x.id} style={{ display: 'flex', justifyContent: 'space-between', padding: 8, borderBottom: '1px solid #eee' }}>
            <div>
              <strong>{x.name}</strong>
              <div style={{ color: '#666' }}>{x.description}</div>
            </div>
            <button onClick={() => onDelete(x.id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  )
}
"""

eslint = """{
  "extends": ["eslint:recommended"],
  "env": { "browser": true, "es2022": true },
  "parserOptions": { "ecmaVersion": "latest", "sourceType": "module" },
  "rules": {}
}
"""

os.makedirs(os.path.join(frontend_dir, "src", "ui"), exist_ok=True)
os.makedirs(os.path.join(frontend_dir, "src", "lib"), exist_ok=True)

with open(os.path.join(frontend_dir, "Dockerfile"), "w") as f:
    f.write(dockerfile_frontend)
with open(os.path.join(frontend_dir, "package.json"), "w") as f:
    f.write(json.dumps(package_json, indent=2))
with open(os.path.join(frontend_dir, "tsconfig.json"), "w") as f:
    f.write(json.dumps(tsconfig, indent=2))
with open(os.path.join(frontend_dir, "index.html"), "w") as f:
    f.write(index_html)
with open(os.path.join(frontend_dir, "src", "main.tsx"), "w") as f:
    f.write(main_tsx)
with open(os.path.join(frontend_dir, "src", "ui", "App.tsx"), "w") as f:
    f.write(app_tsx)
with open(os.path.join(frontend_dir, "src", "lib", "api.ts"), "w") as f:
    f.write(api_ts)
with open(os.path.join(frontend_dir, ".eslintrc.json"), "w") as f:
    f.write(eslint)

# -----------------
# Zip it
# -----------------
zip_path = "/mnt/data/ai-fullstack-starter.zip"
with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as z:
    for path in pathlib.Path(root).rglob("*"):
        z.write(path, path.relative_to(root))

zip_path
